// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/otp_service/otp_service.proto

package otp_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OTPService_SendForgetPasswordOTP_FullMethodName = "/otp.OTPService/SendForgetPasswordOTP"
	OTPService_CheckValidOTP_FullMethodName         = "/otp.OTPService/CheckValidOTP"
)

// OTPServiceClient is the client API for OTPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTPServiceClient interface {
	SendForgetPasswordOTP(ctx context.Context, in *SendForgetPasswordOTPRequest, opts ...grpc.CallOption) (*SendForgetPasswordOTPResponse, error)
	CheckValidOTP(ctx context.Context, in *CheckValidOTPRequest, opts ...grpc.CallOption) (*CheckValidOTPResponse, error)
}

type oTPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOTPServiceClient(cc grpc.ClientConnInterface) OTPServiceClient {
	return &oTPServiceClient{cc}
}

func (c *oTPServiceClient) SendForgetPasswordOTP(ctx context.Context, in *SendForgetPasswordOTPRequest, opts ...grpc.CallOption) (*SendForgetPasswordOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendForgetPasswordOTPResponse)
	err := c.cc.Invoke(ctx, OTPService_SendForgetPasswordOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTPServiceClient) CheckValidOTP(ctx context.Context, in *CheckValidOTPRequest, opts ...grpc.CallOption) (*CheckValidOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckValidOTPResponse)
	err := c.cc.Invoke(ctx, OTPService_CheckValidOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTPServiceServer is the server API for OTPService service.
// All implementations must embed UnimplementedOTPServiceServer
// for forward compatibility.
type OTPServiceServer interface {
	SendForgetPasswordOTP(context.Context, *SendForgetPasswordOTPRequest) (*SendForgetPasswordOTPResponse, error)
	CheckValidOTP(context.Context, *CheckValidOTPRequest) (*CheckValidOTPResponse, error)
	mustEmbedUnimplementedOTPServiceServer()
}

// UnimplementedOTPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOTPServiceServer struct{}

func (UnimplementedOTPServiceServer) SendForgetPasswordOTP(context.Context, *SendForgetPasswordOTPRequest) (*SendForgetPasswordOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgetPasswordOTP not implemented")
}
func (UnimplementedOTPServiceServer) CheckValidOTP(context.Context, *CheckValidOTPRequest) (*CheckValidOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckValidOTP not implemented")
}
func (UnimplementedOTPServiceServer) mustEmbedUnimplementedOTPServiceServer() {}
func (UnimplementedOTPServiceServer) testEmbeddedByValue()                    {}

// UnsafeOTPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTPServiceServer will
// result in compilation errors.
type UnsafeOTPServiceServer interface {
	mustEmbedUnimplementedOTPServiceServer()
}

func RegisterOTPServiceServer(s grpc.ServiceRegistrar, srv OTPServiceServer) {
	// If the following call pancis, it indicates UnimplementedOTPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OTPService_ServiceDesc, srv)
}

func _OTPService_SendForgetPasswordOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgetPasswordOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).SendForgetPasswordOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTPService_SendForgetPasswordOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).SendForgetPasswordOTP(ctx, req.(*SendForgetPasswordOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTPService_CheckValidOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckValidOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPServiceServer).CheckValidOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTPService_CheckValidOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPServiceServer).CheckValidOTP(ctx, req.(*CheckValidOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OTPService_ServiceDesc is the grpc.ServiceDesc for OTPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "otp.OTPService",
	HandlerType: (*OTPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendForgetPasswordOTP",
			Handler:    _OTPService_SendForgetPasswordOTP_Handler,
		},
		{
			MethodName: "CheckValidOTP",
			Handler:    _OTPService_CheckValidOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/otp_service/otp_service.proto",
}
