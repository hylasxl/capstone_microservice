// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: proto/friend_service/friend_service.proto

package friend_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountID string `protobuf:"bytes,1,opt,name=FromAccountID,proto3" json:"FromAccountID,omitempty"`
	ToAccountID   string `protobuf:"bytes,2,opt,name=ToAccountID,proto3" json:"ToAccountID,omitempty"`
}

func (x *SendFriendRequest) Reset() {
	*x = SendFriendRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequest) ProtoMessage() {}

func (x *SendFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequest.ProtoReflect.Descriptor instead.
func (*SendFriendRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{0}
}

func (x *SendFriendRequest) GetFromAccountID() string {
	if x != nil {
		return x.FromAccountID
	}
	return ""
}

func (x *SendFriendRequest) GetToAccountID() string {
	if x != nil {
		return x.ToAccountID
	}
	return ""
}

type SendFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *SendFriendResponse) Reset() {
	*x = SendFriendResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendResponse) ProtoMessage() {}

func (x *SendFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendResponse.ProtoReflect.Descriptor instead.
func (*SendFriendResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{1}
}

func (x *SendFriendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendFriendResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FriendFollowResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountID string `protobuf:"bytes,1,opt,name=FromAccountID,proto3" json:"FromAccountID,omitempty"`
	ToAccountID   string `protobuf:"bytes,2,opt,name=ToAccountID,proto3" json:"ToAccountID,omitempty"`
	Action        string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FriendFollowResolveRequest) Reset() {
	*x = FriendFollowResolveRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendFollowResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendFollowResolveRequest) ProtoMessage() {}

func (x *FriendFollowResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendFollowResolveRequest.ProtoReflect.Descriptor instead.
func (*FriendFollowResolveRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{2}
}

func (x *FriendFollowResolveRequest) GetFromAccountID() string {
	if x != nil {
		return x.FromAccountID
	}
	return ""
}

func (x *FriendFollowResolveRequest) GetToAccountID() string {
	if x != nil {
		return x.ToAccountID
	}
	return ""
}

func (x *FriendFollowResolveRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FriendFollowResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *FriendFollowResolveResponse) Reset() {
	*x = FriendFollowResolveResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendFollowResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendFollowResolveResponse) ProtoMessage() {}

func (x *FriendFollowResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendFollowResolveResponse.ProtoReflect.Descriptor instead.
func (*FriendFollowResolveResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{3}
}

func (x *FriendFollowResolveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FriendFollowResolveResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FriendBlockResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountID string `protobuf:"bytes,1,opt,name=FromAccountID,proto3" json:"FromAccountID,omitempty"`
	ToAccountID   string `protobuf:"bytes,2,opt,name=ToAccountID,proto3" json:"ToAccountID,omitempty"`
	Action        string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FriendBlockResolveRequest) Reset() {
	*x = FriendBlockResolveRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendBlockResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendBlockResolveRequest) ProtoMessage() {}

func (x *FriendBlockResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendBlockResolveRequest.ProtoReflect.Descriptor instead.
func (*FriendBlockResolveRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{4}
}

func (x *FriendBlockResolveRequest) GetFromAccountID() string {
	if x != nil {
		return x.FromAccountID
	}
	return ""
}

func (x *FriendBlockResolveRequest) GetToAccountID() string {
	if x != nil {
		return x.ToAccountID
	}
	return ""
}

func (x *FriendBlockResolveRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FriendBlockResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *FriendBlockResolveResponse) Reset() {
	*x = FriendBlockResolveResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendBlockResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendBlockResolveResponse) ProtoMessage() {}

func (x *FriendBlockResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendBlockResolveResponse.ProtoReflect.Descriptor instead.
func (*FriendBlockResolveResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{5}
}

func (x *FriendBlockResolveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FriendBlockResolveResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetListFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *GetListFriendRequest) Reset() {
	*x = GetListFriendRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListFriendRequest) ProtoMessage() {}

func (x *GetListFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListFriendRequest.ProtoReflect.Descriptor instead.
func (*GetListFriendRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetListFriendRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetListFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListFriendIDs []string `protobuf:"bytes,1,rep,name=ListFriendIDs,proto3" json:"ListFriendIDs,omitempty"`
	Error         string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetListFriendResponse) Reset() {
	*x = GetListFriendResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListFriendResponse) ProtoMessage() {}

func (x *GetListFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListFriendResponse.ProtoReflect.Descriptor instead.
func (*GetListFriendResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetListFriendResponse) GetListFriendIDs() []string {
	if x != nil {
		return x.ListFriendIDs
	}
	return nil
}

func (x *GetListFriendResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetPendingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Page      int64  `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *GetPendingListRequest) Reset() {
	*x = GetPendingListRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPendingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingListRequest) ProtoMessage() {}

func (x *GetPendingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingListRequest.ProtoReflect.Descriptor instead.
func (*GetPendingListRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetPendingListRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetPendingListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetPendingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListPending []*PendingData `protobuf:"bytes,1,rep,name=ListPending,proto3" json:"ListPending,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Page        int64          `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *GetPendingListResponse) Reset() {
	*x = GetPendingListResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPendingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingListResponse) ProtoMessage() {}

func (x *GetPendingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingListResponse.ProtoReflect.Descriptor instead.
func (*GetPendingListResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetPendingListResponse) GetListPending() []*PendingData {
	if x != nil {
		return x.ListPending
	}
	return nil
}

func (x *GetPendingListResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetPendingListResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type PendingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     uint64 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	RequestID     uint64 `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	CreatedAt     int64  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	MutualFriends int64  `protobuf:"varint,4,opt,name=MutualFriends,proto3" json:"MutualFriends,omitempty"`
}

func (x *PendingData) Reset() {
	*x = PendingData{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingData) ProtoMessage() {}

func (x *PendingData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingData.ProtoReflect.Descriptor instead.
func (*PendingData) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{10}
}

func (x *PendingData) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *PendingData) GetRequestID() uint64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *PendingData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PendingData) GetMutualFriends() int64 {
	if x != nil {
		return x.MutualFriends
	}
	return 0
}

type UnfriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountID string `protobuf:"bytes,1,opt,name=FromAccountID,proto3" json:"FromAccountID,omitempty"`
	ToAccountID   string `protobuf:"bytes,2,opt,name=ToAccountID,proto3" json:"ToAccountID,omitempty"`
}

func (x *UnfriendRequest) Reset() {
	*x = UnfriendRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnfriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfriendRequest) ProtoMessage() {}

func (x *UnfriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfriendRequest.ProtoReflect.Descriptor instead.
func (*UnfriendRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{11}
}

func (x *UnfriendRequest) GetFromAccountID() string {
	if x != nil {
		return x.FromAccountID
	}
	return ""
}

func (x *UnfriendRequest) GetToAccountID() string {
	if x != nil {
		return x.ToAccountID
	}
	return ""
}

type UnfriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *UnfriendResponse) Reset() {
	*x = UnfriendResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnfriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfriendResponse) ProtoMessage() {}

func (x *UnfriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfriendResponse.ProtoReflect.Descriptor instead.
func (*UnfriendResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{12}
}

func (x *UnfriendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnfriendResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FriendListResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverID uint64 `protobuf:"varint,1,opt,name=ReceiverID,proto3" json:"ReceiverID,omitempty"`
	RequestID  uint64 `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Action     string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FriendListResolveRequest) Reset() {
	*x = FriendListResolveRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendListResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListResolveRequest) ProtoMessage() {}

func (x *FriendListResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListResolveRequest.ProtoReflect.Descriptor instead.
func (*FriendListResolveRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{13}
}

func (x *FriendListResolveRequest) GetReceiverID() uint64 {
	if x != nil {
		return x.ReceiverID
	}
	return 0
}

func (x *FriendListResolveRequest) GetRequestID() uint64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *FriendListResolveRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FriendListResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *FriendListResolveResponse) Reset() {
	*x = FriendListResolveResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendListResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListResolveResponse) ProtoMessage() {}

func (x *FriendListResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListResolveResponse.ProtoReflect.Descriptor instead.
func (*FriendListResolveResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{14}
}

func (x *FriendListResolveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FriendListResolveResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RecallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID  uint64 `protobuf:"varint,1,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	RequestID uint64 `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *RecallRequest) Reset() {
	*x = RecallRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallRequest) ProtoMessage() {}

func (x *RecallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallRequest.ProtoReflect.Descriptor instead.
func (*RecallRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{15}
}

func (x *RecallRequest) GetSenderID() uint64 {
	if x != nil {
		return x.SenderID
	}
	return 0
}

func (x *RecallRequest) GetRequestID() uint64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

type RecallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *RecallResponse) Reset() {
	*x = RecallResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallResponse) ProtoMessage() {}

func (x *RecallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallResponse.ProtoReflect.Descriptor instead.
func (*RecallResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RecallResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CountPendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *CountPendingRequest) Reset() {
	*x = CountPendingRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountPendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPendingRequest) ProtoMessage() {}

func (x *CountPendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPendingRequest.ProtoReflect.Descriptor instead.
func (*CountPendingRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{17}
}

func (x *CountPendingRequest) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

type CountPendingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity int32 `protobuf:"varint,1,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *CountPendingResponse) Reset() {
	*x = CountPendingResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountPendingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPendingResponse) ProtoMessage() {}

func (x *CountPendingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPendingResponse.ProtoReflect.Descriptor instead.
func (*CountPendingResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{18}
}

func (x *CountPendingResponse) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type CheckIsFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstAccountID  uint64 `protobuf:"varint,1,opt,name=FirstAccountID,proto3" json:"FirstAccountID,omitempty"`
	SecondAccountID uint64 `protobuf:"varint,2,opt,name=SecondAccountID,proto3" json:"SecondAccountID,omitempty"`
}

func (x *CheckIsFriendRequest) Reset() {
	*x = CheckIsFriendRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsFriendRequest) ProtoMessage() {}

func (x *CheckIsFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsFriendRequest.ProtoReflect.Descriptor instead.
func (*CheckIsFriendRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{19}
}

func (x *CheckIsFriendRequest) GetFirstAccountID() uint64 {
	if x != nil {
		return x.FirstAccountID
	}
	return 0
}

func (x *CheckIsFriendRequest) GetSecondAccountID() uint64 {
	if x != nil {
		return x.SecondAccountID
	}
	return 0
}

type CheckIsFriendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFriend bool   `protobuf:"varint,1,opt,name=IsFriend,proto3" json:"IsFriend,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CheckIsFriendResponse) Reset() {
	*x = CheckIsFriendResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsFriendResponse) ProtoMessage() {}

func (x *CheckIsFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsFriendResponse.ProtoReflect.Descriptor instead.
func (*CheckIsFriendResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{20}
}

func (x *CheckIsFriendResponse) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

func (x *CheckIsFriendResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CheckIsBlockedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstAccountID  uint64 `protobuf:"varint,1,opt,name=FirstAccountID,proto3" json:"FirstAccountID,omitempty"`
	SecondAccountID uint64 `protobuf:"varint,2,opt,name=SecondAccountID,proto3" json:"SecondAccountID,omitempty"`
}

func (x *CheckIsBlockedRequest) Reset() {
	*x = CheckIsBlockedRequest{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsBlockedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsBlockedRequest) ProtoMessage() {}

func (x *CheckIsBlockedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsBlockedRequest.ProtoReflect.Descriptor instead.
func (*CheckIsBlockedRequest) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{21}
}

func (x *CheckIsBlockedRequest) GetFirstAccountID() uint64 {
	if x != nil {
		return x.FirstAccountID
	}
	return 0
}

func (x *CheckIsBlockedRequest) GetSecondAccountID() uint64 {
	if x != nil {
		return x.SecondAccountID
	}
	return 0
}

type CheckIsBlockedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked bool   `protobuf:"varint,1,opt,name=IsBlocked,proto3" json:"IsBlocked,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CheckIsBlockedResponse) Reset() {
	*x = CheckIsBlockedResponse{}
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsBlockedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsBlockedResponse) ProtoMessage() {}

func (x *CheckIsBlockedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_friend_service_friend_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsBlockedResponse.ProtoReflect.Descriptor instead.
func (*CheckIsBlockedResponse) Descriptor() ([]byte, []int) {
	return file_proto_friend_service_friend_service_proto_rawDescGZIP(), []int{22}
}

func (x *CheckIsBlockedResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *CheckIsBlockedResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_proto_friend_service_friend_service_proto protoreflect.FileDescriptor

var file_proto_friend_service_friend_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x44, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x1a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x19, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4c, 0x0a, 0x1a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x34,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22,
	0x59, 0x0a, 0x0f, 0x55, 0x6e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x10, 0x55, 0x6e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70,
	0x0a, 0x18, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4b, 0x0a, 0x19, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x13, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x32, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x49, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0xfa, 0x06, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x19, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x22, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x55, 0x6e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x17, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12,
	0x5a, 0x10, 0x2e, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_friend_service_friend_service_proto_rawDescOnce sync.Once
	file_proto_friend_service_friend_service_proto_rawDescData = file_proto_friend_service_friend_service_proto_rawDesc
)

func file_proto_friend_service_friend_service_proto_rawDescGZIP() []byte {
	file_proto_friend_service_friend_service_proto_rawDescOnce.Do(func() {
		file_proto_friend_service_friend_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_friend_service_friend_service_proto_rawDescData)
	})
	return file_proto_friend_service_friend_service_proto_rawDescData
}

var file_proto_friend_service_friend_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_friend_service_friend_service_proto_goTypes = []any{
	(*SendFriendRequest)(nil),           // 0: friend.SendFriendRequest
	(*SendFriendResponse)(nil),          // 1: friend.SendFriendResponse
	(*FriendFollowResolveRequest)(nil),  // 2: friend.FriendFollowResolveRequest
	(*FriendFollowResolveResponse)(nil), // 3: friend.FriendFollowResolveResponse
	(*FriendBlockResolveRequest)(nil),   // 4: friend.FriendBlockResolveRequest
	(*FriendBlockResolveResponse)(nil),  // 5: friend.FriendBlockResolveResponse
	(*GetListFriendRequest)(nil),        // 6: friend.GetListFriendRequest
	(*GetListFriendResponse)(nil),       // 7: friend.GetListFriendResponse
	(*GetPendingListRequest)(nil),       // 8: friend.GetPendingListRequest
	(*GetPendingListResponse)(nil),      // 9: friend.GetPendingListResponse
	(*PendingData)(nil),                 // 10: friend.PendingData
	(*UnfriendRequest)(nil),             // 11: friend.UnfriendRequest
	(*UnfriendResponse)(nil),            // 12: friend.UnfriendResponse
	(*FriendListResolveRequest)(nil),    // 13: friend.FriendListResolveRequest
	(*FriendListResolveResponse)(nil),   // 14: friend.FriendListResolveResponse
	(*RecallRequest)(nil),               // 15: friend.RecallRequest
	(*RecallResponse)(nil),              // 16: friend.RecallResponse
	(*CountPendingRequest)(nil),         // 17: friend.CountPendingRequest
	(*CountPendingResponse)(nil),        // 18: friend.CountPendingResponse
	(*CheckIsFriendRequest)(nil),        // 19: friend.CheckIsFriendRequest
	(*CheckIsFriendResponse)(nil),       // 20: friend.CheckIsFriendResponse
	(*CheckIsBlockedRequest)(nil),       // 21: friend.CheckIsBlockedRequest
	(*CheckIsBlockedResponse)(nil),      // 22: friend.CheckIsBlockedResponse
}
var file_proto_friend_service_friend_service_proto_depIdxs = []int32{
	10, // 0: friend.GetPendingListResponse.ListPending:type_name -> friend.PendingData
	0,  // 1: friend.FriendService.SendFriend:input_type -> friend.SendFriendRequest
	2,  // 2: friend.FriendService.ResolveFriendFollow:input_type -> friend.FriendFollowResolveRequest
	4,  // 3: friend.FriendService.ResolveFriendBlock:input_type -> friend.FriendBlockResolveRequest
	6,  // 4: friend.FriendService.GetListFriend:input_type -> friend.GetListFriendRequest
	8,  // 5: friend.FriendService.GetPendingList:input_type -> friend.GetPendingListRequest
	11, // 6: friend.FriendService.Unfriend:input_type -> friend.UnfriendRequest
	13, // 7: friend.FriendService.ResolveFriendRequest:input_type -> friend.FriendListResolveRequest
	15, // 8: friend.FriendService.RecallFriendRequest:input_type -> friend.RecallRequest
	17, // 9: friend.FriendService.CountPending:input_type -> friend.CountPendingRequest
	19, // 10: friend.FriendService.CheckIsFriend:input_type -> friend.CheckIsFriendRequest
	21, // 11: friend.FriendService.CheckIsBlock:input_type -> friend.CheckIsBlockedRequest
	1,  // 12: friend.FriendService.SendFriend:output_type -> friend.SendFriendResponse
	3,  // 13: friend.FriendService.ResolveFriendFollow:output_type -> friend.FriendFollowResolveResponse
	5,  // 14: friend.FriendService.ResolveFriendBlock:output_type -> friend.FriendBlockResolveResponse
	7,  // 15: friend.FriendService.GetListFriend:output_type -> friend.GetListFriendResponse
	9,  // 16: friend.FriendService.GetPendingList:output_type -> friend.GetPendingListResponse
	12, // 17: friend.FriendService.Unfriend:output_type -> friend.UnfriendResponse
	14, // 18: friend.FriendService.ResolveFriendRequest:output_type -> friend.FriendListResolveResponse
	16, // 19: friend.FriendService.RecallFriendRequest:output_type -> friend.RecallResponse
	18, // 20: friend.FriendService.CountPending:output_type -> friend.CountPendingResponse
	20, // 21: friend.FriendService.CheckIsFriend:output_type -> friend.CheckIsFriendResponse
	22, // 22: friend.FriendService.CheckIsBlock:output_type -> friend.CheckIsBlockedResponse
	12, // [12:23] is the sub-list for method output_type
	1,  // [1:12] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_proto_friend_service_friend_service_proto_init() }
func file_proto_friend_service_friend_service_proto_init() {
	if File_proto_friend_service_friend_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_friend_service_friend_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_friend_service_friend_service_proto_goTypes,
		DependencyIndexes: file_proto_friend_service_friend_service_proto_depIdxs,
		MessageInfos:      file_proto_friend_service_friend_service_proto_msgTypes,
	}.Build()
	File_proto_friend_service_friend_service_proto = out.File
	file_proto_friend_service_friend_service_proto_rawDesc = nil
	file_proto_friend_service_friend_service_proto_goTypes = nil
	file_proto_friend_service_friend_service_proto_depIdxs = nil
}
