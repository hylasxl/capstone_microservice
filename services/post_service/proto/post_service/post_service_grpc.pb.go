// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/post_service/post_service.proto

package post_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostService_CreateNewPost_FullMethodName       = "/post.PostService/CreateNewPost"
	PostService_UploadPostImage_FullMethodName     = "/post.PostService/UploadPostImage"
	PostService_SharePost_FullMethodName           = "/post.PostService/SharePost"
	PostService_CommentPost_FullMethodName         = "/post.PostService/CommentPost"
	PostService_GetSinglePost_FullMethodName       = "/post.PostService/GetSinglePost"
	PostService_EditPost_FullMethodName            = "/post.PostService/EditPost"
	PostService_DeletePost_FullMethodName          = "/post.PostService/DeletePost"
	PostService_ReplyComment_FullMethodName        = "/post.PostService/ReplyComment"
	PostService_EditComment_FullMethodName         = "/post.PostService/EditComment"
	PostService_DeleteComment_FullMethodName       = "/post.PostService/DeleteComment"
	PostService_DeletePostImage_FullMethodName     = "/post.PostService/DeletePostImage"
	PostService_ReactPost_FullMethodName           = "/post.PostService/ReactPost"
	PostService_RemoveReactPost_FullMethodName     = "/post.PostService/RemoveReactPost"
	PostService_ReactImage_FullMethodName          = "/post.PostService/ReactImage"
	PostService_RemoveReactImage_FullMethodName    = "/post.PostService/RemoveReactImage"
	PostService_CommentImage_FullMethodName        = "/post.PostService/CommentImage"
	PostService_ReplyCommentImage_FullMethodName   = "/post.PostService/ReplyCommentImage"
	PostService_EditCommentImage_FullMethodName    = "/post.PostService/EditCommentImage"
	PostService_DeleteCommentImage_FullMethodName  = "/post.PostService/DeleteCommentImage"
	PostService_CountPostComment_FullMethodName    = "/post.PostService/CountPostComment"
	PostService_CountPostReaction_FullMethodName   = "/post.PostService/CountPostReaction"
	PostService_CountPostShare_FullMethodName      = "/post.PostService/CountPostShare"
	PostService_GetPostComment_FullMethodName      = "/post.PostService/GetPostComment"
	PostService_GetPostReaction_FullMethodName     = "/post.PostService/GetPostReaction"
	PostService_GetPostMediaComment_FullMethodName = "/post.PostService/GetPostMediaComment"
	PostService_GetWallPostList_FullMethodName     = "/post.PostService/GetWallPostList"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	CreateNewPost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	UploadPostImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	SharePost(ctx context.Context, in *SharePostRequest, opts ...grpc.CallOption) (*SharePostResponse, error)
	CommentPost(ctx context.Context, in *CommentPostRequest, opts ...grpc.CallOption) (*CommentPostResponse, error)
	GetSinglePost(ctx context.Context, in *GetSinglePostRequest, opts ...grpc.CallOption) (*GetSinglePostResponse, error)
	EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error)
	EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	DeletePostImage(ctx context.Context, in *DeletePostImageRequest, opts ...grpc.CallOption) (*DeletePostImageResponse, error)
	ReactPost(ctx context.Context, in *ReactPostRequest, opts ...grpc.CallOption) (*ReactPostResponse, error)
	RemoveReactPost(ctx context.Context, in *RemoveReactPostRequest, opts ...grpc.CallOption) (*RemoveReactPostResponse, error)
	ReactImage(ctx context.Context, in *ReactImageRequest, opts ...grpc.CallOption) (*ReactImageResponse, error)
	RemoveReactImage(ctx context.Context, in *RemoveReactImageRequest, opts ...grpc.CallOption) (*RemoveReactImageResponse, error)
	CommentImage(ctx context.Context, in *CommentImageRequest, opts ...grpc.CallOption) (*CommentImageResponse, error)
	ReplyCommentImage(ctx context.Context, in *ReplyCommentImageRequest, opts ...grpc.CallOption) (*ReplyCommentImageResponse, error)
	EditCommentImage(ctx context.Context, in *EditCommentImageRequest, opts ...grpc.CallOption) (*EditCommentImageResponse, error)
	DeleteCommentImage(ctx context.Context, in *DeleteCommentImageRequest, opts ...grpc.CallOption) (*DeleteCommentImageResponse, error)
	CountPostComment(ctx context.Context, in *CountPostCommentRequest, opts ...grpc.CallOption) (*CountPostCommentResponse, error)
	CountPostReaction(ctx context.Context, in *CountPostReactionRequest, opts ...grpc.CallOption) (*CountPostReactionResponse, error)
	CountPostShare(ctx context.Context, in *CountPostShareRequest, opts ...grpc.CallOption) (*CountPostShareResponse, error)
	GetPostComment(ctx context.Context, in *GetPostCommentRequest, opts ...grpc.CallOption) (*GetPostCommentResponse, error)
	GetPostReaction(ctx context.Context, in *GetPostReactionRequest, opts ...grpc.CallOption) (*GetPostReactionResponse, error)
	GetPostMediaComment(ctx context.Context, in *GetPostMediaCommentRequest, opts ...grpc.CallOption) (*GetPostMediaCommentResponse, error)
	GetWallPostList(ctx context.Context, in *GetWallPostListRequest, opts ...grpc.CallOption) (*GetWallPostListResponse, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreateNewPost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, PostService_CreateNewPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UploadPostImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, PostService_UploadPostImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SharePost(ctx context.Context, in *SharePostRequest, opts ...grpc.CallOption) (*SharePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharePostResponse)
	err := c.cc.Invoke(ctx, PostService_SharePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CommentPost(ctx context.Context, in *CommentPostRequest, opts ...grpc.CallOption) (*CommentPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentPostResponse)
	err := c.cc.Invoke(ctx, PostService_CommentPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetSinglePost(ctx context.Context, in *GetSinglePostRequest, opts ...grpc.CallOption) (*GetSinglePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSinglePostResponse)
	err := c.cc.Invoke(ctx, PostService_GetSinglePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditPostResponse)
	err := c.cc.Invoke(ctx, PostService_EditPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, PostService_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentResponse)
	err := c.cc.Invoke(ctx, PostService_ReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCommentResponse)
	err := c.cc.Invoke(ctx, PostService_EditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, PostService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePostImage(ctx context.Context, in *DeletePostImageRequest, opts ...grpc.CallOption) (*DeletePostImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostImageResponse)
	err := c.cc.Invoke(ctx, PostService_DeletePostImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ReactPost(ctx context.Context, in *ReactPostRequest, opts ...grpc.CallOption) (*ReactPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactPostResponse)
	err := c.cc.Invoke(ctx, PostService_ReactPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RemoveReactPost(ctx context.Context, in *RemoveReactPostRequest, opts ...grpc.CallOption) (*RemoveReactPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveReactPostResponse)
	err := c.cc.Invoke(ctx, PostService_RemoveReactPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ReactImage(ctx context.Context, in *ReactImageRequest, opts ...grpc.CallOption) (*ReactImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactImageResponse)
	err := c.cc.Invoke(ctx, PostService_ReactImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RemoveReactImage(ctx context.Context, in *RemoveReactImageRequest, opts ...grpc.CallOption) (*RemoveReactImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveReactImageResponse)
	err := c.cc.Invoke(ctx, PostService_RemoveReactImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CommentImage(ctx context.Context, in *CommentImageRequest, opts ...grpc.CallOption) (*CommentImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentImageResponse)
	err := c.cc.Invoke(ctx, PostService_CommentImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ReplyCommentImage(ctx context.Context, in *ReplyCommentImageRequest, opts ...grpc.CallOption) (*ReplyCommentImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentImageResponse)
	err := c.cc.Invoke(ctx, PostService_ReplyCommentImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) EditCommentImage(ctx context.Context, in *EditCommentImageRequest, opts ...grpc.CallOption) (*EditCommentImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCommentImageResponse)
	err := c.cc.Invoke(ctx, PostService_EditCommentImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteCommentImage(ctx context.Context, in *DeleteCommentImageRequest, opts ...grpc.CallOption) (*DeleteCommentImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentImageResponse)
	err := c.cc.Invoke(ctx, PostService_DeleteCommentImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CountPostComment(ctx context.Context, in *CountPostCommentRequest, opts ...grpc.CallOption) (*CountPostCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountPostCommentResponse)
	err := c.cc.Invoke(ctx, PostService_CountPostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CountPostReaction(ctx context.Context, in *CountPostReactionRequest, opts ...grpc.CallOption) (*CountPostReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountPostReactionResponse)
	err := c.cc.Invoke(ctx, PostService_CountPostReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CountPostShare(ctx context.Context, in *CountPostShareRequest, opts ...grpc.CallOption) (*CountPostShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountPostShareResponse)
	err := c.cc.Invoke(ctx, PostService_CountPostShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostComment(ctx context.Context, in *GetPostCommentRequest, opts ...grpc.CallOption) (*GetPostCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostCommentResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostReaction(ctx context.Context, in *GetPostReactionRequest, opts ...grpc.CallOption) (*GetPostReactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostReactionResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostMediaComment(ctx context.Context, in *GetPostMediaCommentRequest, opts ...grpc.CallOption) (*GetPostMediaCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostMediaCommentResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostMediaComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetWallPostList(ctx context.Context, in *GetWallPostListRequest, opts ...grpc.CallOption) (*GetWallPostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWallPostListResponse)
	err := c.cc.Invoke(ctx, PostService_GetWallPostList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility.
type PostServiceServer interface {
	CreateNewPost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	UploadPostImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	SharePost(context.Context, *SharePostRequest) (*SharePostResponse, error)
	CommentPost(context.Context, *CommentPostRequest) (*CommentPostResponse, error)
	GetSinglePost(context.Context, *GetSinglePostRequest) (*GetSinglePostResponse, error)
	EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error)
	EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	DeletePostImage(context.Context, *DeletePostImageRequest) (*DeletePostImageResponse, error)
	ReactPost(context.Context, *ReactPostRequest) (*ReactPostResponse, error)
	RemoveReactPost(context.Context, *RemoveReactPostRequest) (*RemoveReactPostResponse, error)
	ReactImage(context.Context, *ReactImageRequest) (*ReactImageResponse, error)
	RemoveReactImage(context.Context, *RemoveReactImageRequest) (*RemoveReactImageResponse, error)
	CommentImage(context.Context, *CommentImageRequest) (*CommentImageResponse, error)
	ReplyCommentImage(context.Context, *ReplyCommentImageRequest) (*ReplyCommentImageResponse, error)
	EditCommentImage(context.Context, *EditCommentImageRequest) (*EditCommentImageResponse, error)
	DeleteCommentImage(context.Context, *DeleteCommentImageRequest) (*DeleteCommentImageResponse, error)
	CountPostComment(context.Context, *CountPostCommentRequest) (*CountPostCommentResponse, error)
	CountPostReaction(context.Context, *CountPostReactionRequest) (*CountPostReactionResponse, error)
	CountPostShare(context.Context, *CountPostShareRequest) (*CountPostShareResponse, error)
	GetPostComment(context.Context, *GetPostCommentRequest) (*GetPostCommentResponse, error)
	GetPostReaction(context.Context, *GetPostReactionRequest) (*GetPostReactionResponse, error)
	GetPostMediaComment(context.Context, *GetPostMediaCommentRequest) (*GetPostMediaCommentResponse, error)
	GetWallPostList(context.Context, *GetWallPostListRequest) (*GetWallPostListResponse, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServiceServer struct{}

func (UnimplementedPostServiceServer) CreateNewPost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPost not implemented")
}
func (UnimplementedPostServiceServer) UploadPostImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPostImage not implemented")
}
func (UnimplementedPostServiceServer) SharePost(context.Context, *SharePostRequest) (*SharePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePost not implemented")
}
func (UnimplementedPostServiceServer) CommentPost(context.Context, *CommentPostRequest) (*CommentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPost not implemented")
}
func (UnimplementedPostServiceServer) GetSinglePost(context.Context, *GetSinglePostRequest) (*GetSinglePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSinglePost not implemented")
}
func (UnimplementedPostServiceServer) EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedPostServiceServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServiceServer) ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedPostServiceServer) EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedPostServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPostServiceServer) DeletePostImage(context.Context, *DeletePostImageRequest) (*DeletePostImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostImage not implemented")
}
func (UnimplementedPostServiceServer) ReactPost(context.Context, *ReactPostRequest) (*ReactPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactPost not implemented")
}
func (UnimplementedPostServiceServer) RemoveReactPost(context.Context, *RemoveReactPostRequest) (*RemoveReactPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReactPost not implemented")
}
func (UnimplementedPostServiceServer) ReactImage(context.Context, *ReactImageRequest) (*ReactImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactImage not implemented")
}
func (UnimplementedPostServiceServer) RemoveReactImage(context.Context, *RemoveReactImageRequest) (*RemoveReactImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReactImage not implemented")
}
func (UnimplementedPostServiceServer) CommentImage(context.Context, *CommentImageRequest) (*CommentImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentImage not implemented")
}
func (UnimplementedPostServiceServer) ReplyCommentImage(context.Context, *ReplyCommentImageRequest) (*ReplyCommentImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyCommentImage not implemented")
}
func (UnimplementedPostServiceServer) EditCommentImage(context.Context, *EditCommentImageRequest) (*EditCommentImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCommentImage not implemented")
}
func (UnimplementedPostServiceServer) DeleteCommentImage(context.Context, *DeleteCommentImageRequest) (*DeleteCommentImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentImage not implemented")
}
func (UnimplementedPostServiceServer) CountPostComment(context.Context, *CountPostCommentRequest) (*CountPostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPostComment not implemented")
}
func (UnimplementedPostServiceServer) CountPostReaction(context.Context, *CountPostReactionRequest) (*CountPostReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPostReaction not implemented")
}
func (UnimplementedPostServiceServer) CountPostShare(context.Context, *CountPostShareRequest) (*CountPostShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPostShare not implemented")
}
func (UnimplementedPostServiceServer) GetPostComment(context.Context, *GetPostCommentRequest) (*GetPostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostComment not implemented")
}
func (UnimplementedPostServiceServer) GetPostReaction(context.Context, *GetPostReactionRequest) (*GetPostReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostReaction not implemented")
}
func (UnimplementedPostServiceServer) GetPostMediaComment(context.Context, *GetPostMediaCommentRequest) (*GetPostMediaCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostMediaComment not implemented")
}
func (UnimplementedPostServiceServer) GetWallPostList(context.Context, *GetWallPostListRequest) (*GetWallPostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallPostList not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}
func (UnimplementedPostServiceServer) testEmbeddedByValue()                     {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_CreateNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreateNewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateNewPost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UploadPostImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UploadPostImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UploadPostImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UploadPostImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SharePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SharePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_SharePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SharePost(ctx, req.(*SharePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CommentPost(ctx, req.(*CommentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetSinglePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSinglePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetSinglePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetSinglePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetSinglePost(ctx, req.(*GetSinglePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).EditPost(ctx, req.(*EditPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ReplyComment(ctx, req.(*ReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_EditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).EditComment(ctx, req.(*EditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePostImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePostImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePostImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePostImage(ctx, req.(*DeletePostImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ReactPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ReactPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ReactPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ReactPost(ctx, req.(*ReactPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RemoveReactPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReactPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RemoveReactPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RemoveReactPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RemoveReactPost(ctx, req.(*RemoveReactPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ReactImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ReactImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ReactImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ReactImage(ctx, req.(*ReactImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RemoveReactImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReactImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RemoveReactImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RemoveReactImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RemoveReactImage(ctx, req.(*RemoveReactImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CommentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CommentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CommentImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CommentImage(ctx, req.(*CommentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ReplyCommentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ReplyCommentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ReplyCommentImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ReplyCommentImage(ctx, req.(*ReplyCommentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_EditCommentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).EditCommentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_EditCommentImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).EditCommentImage(ctx, req.(*EditCommentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteCommentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteCommentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteCommentImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteCommentImage(ctx, req.(*DeleteCommentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CountPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CountPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CountPostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CountPostComment(ctx, req.(*CountPostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CountPostReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPostReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CountPostReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CountPostReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CountPostReaction(ctx, req.(*CountPostReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CountPostShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPostShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CountPostShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CountPostShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CountPostShare(ctx, req.(*CountPostShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostComment(ctx, req.(*GetPostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostReaction(ctx, req.(*GetPostReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostMediaComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostMediaCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostMediaComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostMediaComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostMediaComment(ctx, req.(*GetPostMediaCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetWallPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWallPostListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetWallPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetWallPostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetWallPostList(ctx, req.(*GetWallPostListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewPost",
			Handler:    _PostService_CreateNewPost_Handler,
		},
		{
			MethodName: "UploadPostImage",
			Handler:    _PostService_UploadPostImage_Handler,
		},
		{
			MethodName: "SharePost",
			Handler:    _PostService_SharePost_Handler,
		},
		{
			MethodName: "CommentPost",
			Handler:    _PostService_CommentPost_Handler,
		},
		{
			MethodName: "GetSinglePost",
			Handler:    _PostService_GetSinglePost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _PostService_EditPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _PostService_ReplyComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _PostService_EditComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _PostService_DeleteComment_Handler,
		},
		{
			MethodName: "DeletePostImage",
			Handler:    _PostService_DeletePostImage_Handler,
		},
		{
			MethodName: "ReactPost",
			Handler:    _PostService_ReactPost_Handler,
		},
		{
			MethodName: "RemoveReactPost",
			Handler:    _PostService_RemoveReactPost_Handler,
		},
		{
			MethodName: "ReactImage",
			Handler:    _PostService_ReactImage_Handler,
		},
		{
			MethodName: "RemoveReactImage",
			Handler:    _PostService_RemoveReactImage_Handler,
		},
		{
			MethodName: "CommentImage",
			Handler:    _PostService_CommentImage_Handler,
		},
		{
			MethodName: "ReplyCommentImage",
			Handler:    _PostService_ReplyCommentImage_Handler,
		},
		{
			MethodName: "EditCommentImage",
			Handler:    _PostService_EditCommentImage_Handler,
		},
		{
			MethodName: "DeleteCommentImage",
			Handler:    _PostService_DeleteCommentImage_Handler,
		},
		{
			MethodName: "CountPostComment",
			Handler:    _PostService_CountPostComment_Handler,
		},
		{
			MethodName: "CountPostReaction",
			Handler:    _PostService_CountPostReaction_Handler,
		},
		{
			MethodName: "CountPostShare",
			Handler:    _PostService_CountPostShare_Handler,
		},
		{
			MethodName: "GetPostComment",
			Handler:    _PostService_GetPostComment_Handler,
		},
		{
			MethodName: "GetPostReaction",
			Handler:    _PostService_GetPostReaction_Handler,
		},
		{
			MethodName: "GetPostMediaComment",
			Handler:    _PostService_GetPostMediaComment_Handler,
		},
		{
			MethodName: "GetWallPostList",
			Handler:    _PostService_GetWallPostList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/post_service/post_service.proto",
}
