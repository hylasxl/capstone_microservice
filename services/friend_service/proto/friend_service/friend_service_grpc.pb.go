// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/friend_service/friend_service.proto

package friend_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendService_SendFriend_FullMethodName           = "/friend.FriendService/SendFriend"
	FriendService_ResolveFriendFollow_FullMethodName  = "/friend.FriendService/ResolveFriendFollow"
	FriendService_ResolveFriendBlock_FullMethodName   = "/friend.FriendService/ResolveFriendBlock"
	FriendService_GetListFriend_FullMethodName        = "/friend.FriendService/GetListFriend"
	FriendService_GetPendingList_FullMethodName       = "/friend.FriendService/GetPendingList"
	FriendService_Unfriend_FullMethodName             = "/friend.FriendService/Unfriend"
	FriendService_ResolveFriendRequest_FullMethodName = "/friend.FriendService/ResolveFriendRequest"
	FriendService_RecallFriendRequest_FullMethodName  = "/friend.FriendService/RecallFriendRequest"
	FriendService_CountPending_FullMethodName         = "/friend.FriendService/CountPending"
	FriendService_CheckIsFriend_FullMethodName        = "/friend.FriendService/CheckIsFriend"
	FriendService_CheckIsBlock_FullMethodName         = "/friend.FriendService/CheckIsBlock"
	FriendService_CheckIsFollow_FullMethodName        = "/friend.FriendService/CheckIsFollow"
	FriendService_GetUserInteraction_FullMethodName   = "/friend.FriendService/GetUserInteraction"
	FriendService_CheckExistingRequest_FullMethodName = "/friend.FriendService/CheckExistingRequest"
	FriendService_GetBlockList_FullMethodName         = "/friend.FriendService/GetBlockList"
	FriendService_GetBlockedList_FullMethodName       = "/friend.FriendService/GetBlockedList"
)

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	SendFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error)
	ResolveFriendFollow(ctx context.Context, in *FriendFollowResolveRequest, opts ...grpc.CallOption) (*FriendFollowResolveResponse, error)
	ResolveFriendBlock(ctx context.Context, in *FriendBlockResolveRequest, opts ...grpc.CallOption) (*FriendBlockResolveResponse, error)
	GetListFriend(ctx context.Context, in *GetListFriendRequest, opts ...grpc.CallOption) (*GetListFriendResponse, error)
	GetPendingList(ctx context.Context, in *GetPendingListRequest, opts ...grpc.CallOption) (*GetPendingListResponse, error)
	Unfriend(ctx context.Context, in *UnfriendRequest, opts ...grpc.CallOption) (*UnfriendResponse, error)
	ResolveFriendRequest(ctx context.Context, in *FriendListResolveRequest, opts ...grpc.CallOption) (*FriendListResolveResponse, error)
	RecallFriendRequest(ctx context.Context, in *RecallRequest, opts ...grpc.CallOption) (*RecallResponse, error)
	CountPending(ctx context.Context, in *CountPendingRequest, opts ...grpc.CallOption) (*CountPendingResponse, error)
	CheckIsFriend(ctx context.Context, in *CheckIsFriendRequest, opts ...grpc.CallOption) (*CheckIsFriendResponse, error)
	CheckIsBlock(ctx context.Context, in *CheckIsBlockedRequest, opts ...grpc.CallOption) (*CheckIsBlockedResponse, error)
	CheckIsFollow(ctx context.Context, in *CheckIsFollowRequest, opts ...grpc.CallOption) (*CheckIsFollowResponse, error)
	GetUserInteraction(ctx context.Context, in *GetUserInteractionRequest, opts ...grpc.CallOption) (*GetUserInteractionResponse, error)
	CheckExistingRequest(ctx context.Context, in *CheckExistingRequestRequest, opts ...grpc.CallOption) (*CheckExistingRequestResponse, error)
	GetBlockList(ctx context.Context, in *GetBlockListRequest, opts ...grpc.CallOption) (*BlockListResponse, error)
	GetBlockedList(ctx context.Context, in *GetBlockedListRequest, opts ...grpc.CallOption) (*BlockListResponse, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) SendFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendResponse)
	err := c.cc.Invoke(ctx, FriendService_SendFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) ResolveFriendFollow(ctx context.Context, in *FriendFollowResolveRequest, opts ...grpc.CallOption) (*FriendFollowResolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendFollowResolveResponse)
	err := c.cc.Invoke(ctx, FriendService_ResolveFriendFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) ResolveFriendBlock(ctx context.Context, in *FriendBlockResolveRequest, opts ...grpc.CallOption) (*FriendBlockResolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendBlockResolveResponse)
	err := c.cc.Invoke(ctx, FriendService_ResolveFriendBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetListFriend(ctx context.Context, in *GetListFriendRequest, opts ...grpc.CallOption) (*GetListFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListFriendResponse)
	err := c.cc.Invoke(ctx, FriendService_GetListFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetPendingList(ctx context.Context, in *GetPendingListRequest, opts ...grpc.CallOption) (*GetPendingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingListResponse)
	err := c.cc.Invoke(ctx, FriendService_GetPendingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) Unfriend(ctx context.Context, in *UnfriendRequest, opts ...grpc.CallOption) (*UnfriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfriendResponse)
	err := c.cc.Invoke(ctx, FriendService_Unfriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) ResolveFriendRequest(ctx context.Context, in *FriendListResolveRequest, opts ...grpc.CallOption) (*FriendListResolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendListResolveResponse)
	err := c.cc.Invoke(ctx, FriendService_ResolveFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) RecallFriendRequest(ctx context.Context, in *RecallRequest, opts ...grpc.CallOption) (*RecallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecallResponse)
	err := c.cc.Invoke(ctx, FriendService_RecallFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) CountPending(ctx context.Context, in *CountPendingRequest, opts ...grpc.CallOption) (*CountPendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountPendingResponse)
	err := c.cc.Invoke(ctx, FriendService_CountPending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) CheckIsFriend(ctx context.Context, in *CheckIsFriendRequest, opts ...grpc.CallOption) (*CheckIsFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIsFriendResponse)
	err := c.cc.Invoke(ctx, FriendService_CheckIsFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) CheckIsBlock(ctx context.Context, in *CheckIsBlockedRequest, opts ...grpc.CallOption) (*CheckIsBlockedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIsBlockedResponse)
	err := c.cc.Invoke(ctx, FriendService_CheckIsBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) CheckIsFollow(ctx context.Context, in *CheckIsFollowRequest, opts ...grpc.CallOption) (*CheckIsFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIsFollowResponse)
	err := c.cc.Invoke(ctx, FriendService_CheckIsFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetUserInteraction(ctx context.Context, in *GetUserInteractionRequest, opts ...grpc.CallOption) (*GetUserInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInteractionResponse)
	err := c.cc.Invoke(ctx, FriendService_GetUserInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) CheckExistingRequest(ctx context.Context, in *CheckExistingRequestRequest, opts ...grpc.CallOption) (*CheckExistingRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckExistingRequestResponse)
	err := c.cc.Invoke(ctx, FriendService_CheckExistingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetBlockList(ctx context.Context, in *GetBlockListRequest, opts ...grpc.CallOption) (*BlockListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockListResponse)
	err := c.cc.Invoke(ctx, FriendService_GetBlockList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetBlockedList(ctx context.Context, in *GetBlockedListRequest, opts ...grpc.CallOption) (*BlockListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockListResponse)
	err := c.cc.Invoke(ctx, FriendService_GetBlockedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility.
type FriendServiceServer interface {
	SendFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error)
	ResolveFriendFollow(context.Context, *FriendFollowResolveRequest) (*FriendFollowResolveResponse, error)
	ResolveFriendBlock(context.Context, *FriendBlockResolveRequest) (*FriendBlockResolveResponse, error)
	GetListFriend(context.Context, *GetListFriendRequest) (*GetListFriendResponse, error)
	GetPendingList(context.Context, *GetPendingListRequest) (*GetPendingListResponse, error)
	Unfriend(context.Context, *UnfriendRequest) (*UnfriendResponse, error)
	ResolveFriendRequest(context.Context, *FriendListResolveRequest) (*FriendListResolveResponse, error)
	RecallFriendRequest(context.Context, *RecallRequest) (*RecallResponse, error)
	CountPending(context.Context, *CountPendingRequest) (*CountPendingResponse, error)
	CheckIsFriend(context.Context, *CheckIsFriendRequest) (*CheckIsFriendResponse, error)
	CheckIsBlock(context.Context, *CheckIsBlockedRequest) (*CheckIsBlockedResponse, error)
	CheckIsFollow(context.Context, *CheckIsFollowRequest) (*CheckIsFollowResponse, error)
	GetUserInteraction(context.Context, *GetUserInteractionRequest) (*GetUserInteractionResponse, error)
	CheckExistingRequest(context.Context, *CheckExistingRequestRequest) (*CheckExistingRequestResponse, error)
	GetBlockList(context.Context, *GetBlockListRequest) (*BlockListResponse, error)
	GetBlockedList(context.Context, *GetBlockedListRequest) (*BlockListResponse, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendServiceServer struct{}

func (UnimplementedFriendServiceServer) SendFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriend not implemented")
}
func (UnimplementedFriendServiceServer) ResolveFriendFollow(context.Context, *FriendFollowResolveRequest) (*FriendFollowResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFriendFollow not implemented")
}
func (UnimplementedFriendServiceServer) ResolveFriendBlock(context.Context, *FriendBlockResolveRequest) (*FriendBlockResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFriendBlock not implemented")
}
func (UnimplementedFriendServiceServer) GetListFriend(context.Context, *GetListFriendRequest) (*GetListFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFriend not implemented")
}
func (UnimplementedFriendServiceServer) GetPendingList(context.Context, *GetPendingListRequest) (*GetPendingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingList not implemented")
}
func (UnimplementedFriendServiceServer) Unfriend(context.Context, *UnfriendRequest) (*UnfriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfriend not implemented")
}
func (UnimplementedFriendServiceServer) ResolveFriendRequest(context.Context, *FriendListResolveRequest) (*FriendListResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFriendRequest not implemented")
}
func (UnimplementedFriendServiceServer) RecallFriendRequest(context.Context, *RecallRequest) (*RecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecallFriendRequest not implemented")
}
func (UnimplementedFriendServiceServer) CountPending(context.Context, *CountPendingRequest) (*CountPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPending not implemented")
}
func (UnimplementedFriendServiceServer) CheckIsFriend(context.Context, *CheckIsFriendRequest) (*CheckIsFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsFriend not implemented")
}
func (UnimplementedFriendServiceServer) CheckIsBlock(context.Context, *CheckIsBlockedRequest) (*CheckIsBlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsBlock not implemented")
}
func (UnimplementedFriendServiceServer) CheckIsFollow(context.Context, *CheckIsFollowRequest) (*CheckIsFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsFollow not implemented")
}
func (UnimplementedFriendServiceServer) GetUserInteraction(context.Context, *GetUserInteractionRequest) (*GetUserInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInteraction not implemented")
}
func (UnimplementedFriendServiceServer) CheckExistingRequest(context.Context, *CheckExistingRequestRequest) (*CheckExistingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistingRequest not implemented")
}
func (UnimplementedFriendServiceServer) GetBlockList(context.Context, *GetBlockListRequest) (*BlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockList not implemented")
}
func (UnimplementedFriendServiceServer) GetBlockedList(context.Context, *GetBlockedListRequest) (*BlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedList not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}
func (UnimplementedFriendServiceServer) testEmbeddedByValue()                       {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_SendFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).SendFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_SendFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).SendFriend(ctx, req.(*SendFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_ResolveFriendFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendFollowResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).ResolveFriendFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_ResolveFriendFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).ResolveFriendFollow(ctx, req.(*FriendFollowResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_ResolveFriendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendBlockResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).ResolveFriendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_ResolveFriendBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).ResolveFriendBlock(ctx, req.(*FriendBlockResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetListFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetListFriend(ctx, req.(*GetListFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetPendingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetPendingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetPendingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetPendingList(ctx, req.(*GetPendingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_Unfriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).Unfriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_Unfriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).Unfriend(ctx, req.(*UnfriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_ResolveFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).ResolveFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_ResolveFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).ResolveFriendRequest(ctx, req.(*FriendListResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_RecallFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).RecallFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_RecallFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).RecallFriendRequest(ctx, req.(*RecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_CountPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CountPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_CountPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CountPending(ctx, req.(*CountPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_CheckIsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CheckIsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_CheckIsFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CheckIsFriend(ctx, req.(*CheckIsFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_CheckIsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CheckIsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_CheckIsBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CheckIsBlock(ctx, req.(*CheckIsBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_CheckIsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CheckIsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_CheckIsFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CheckIsFollow(ctx, req.(*CheckIsFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetUserInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetUserInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetUserInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetUserInteraction(ctx, req.(*GetUserInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_CheckExistingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CheckExistingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_CheckExistingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CheckExistingRequest(ctx, req.(*CheckExistingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetBlockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetBlockList(ctx, req.(*GetBlockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetBlockedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetBlockedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_GetBlockedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetBlockedList(ctx, req.(*GetBlockedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriend",
			Handler:    _FriendService_SendFriend_Handler,
		},
		{
			MethodName: "ResolveFriendFollow",
			Handler:    _FriendService_ResolveFriendFollow_Handler,
		},
		{
			MethodName: "ResolveFriendBlock",
			Handler:    _FriendService_ResolveFriendBlock_Handler,
		},
		{
			MethodName: "GetListFriend",
			Handler:    _FriendService_GetListFriend_Handler,
		},
		{
			MethodName: "GetPendingList",
			Handler:    _FriendService_GetPendingList_Handler,
		},
		{
			MethodName: "Unfriend",
			Handler:    _FriendService_Unfriend_Handler,
		},
		{
			MethodName: "ResolveFriendRequest",
			Handler:    _FriendService_ResolveFriendRequest_Handler,
		},
		{
			MethodName: "RecallFriendRequest",
			Handler:    _FriendService_RecallFriendRequest_Handler,
		},
		{
			MethodName: "CountPending",
			Handler:    _FriendService_CountPending_Handler,
		},
		{
			MethodName: "CheckIsFriend",
			Handler:    _FriendService_CheckIsFriend_Handler,
		},
		{
			MethodName: "CheckIsBlock",
			Handler:    _FriendService_CheckIsBlock_Handler,
		},
		{
			MethodName: "CheckIsFollow",
			Handler:    _FriendService_CheckIsFollow_Handler,
		},
		{
			MethodName: "GetUserInteraction",
			Handler:    _FriendService_GetUserInteraction_Handler,
		},
		{
			MethodName: "CheckExistingRequest",
			Handler:    _FriendService_CheckExistingRequest_Handler,
		},
		{
			MethodName: "GetBlockList",
			Handler:    _FriendService_GetBlockList_Handler,
		},
		{
			MethodName: "GetBlockedList",
			Handler:    _FriendService_GetBlockedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/friend_service/friend_service.proto",
}
