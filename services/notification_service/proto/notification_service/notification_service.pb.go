// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: proto/notification_service/notification_service.proto

package notification_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   uint32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FCMToken string `protobuf:"bytes,2,opt,name=FCMToken,proto3" json:"FCMToken,omitempty"`
}

func (x *RegisterDeviceRequest) Reset() {
	*x = RegisterDeviceRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceRequest) ProtoMessage() {}

func (x *RegisterDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterDeviceRequest) GetUserID() uint32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *RegisterDeviceRequest) GetFCMToken() string {
	if x != nil {
		return x.FCMToken
	}
	return ""
}

type RegisterDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *RegisterDeviceResponse) Reset() {
	*x = RegisterDeviceResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceResponse) ProtoMessage() {}

func (x *RegisterDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceResponse.ProtoReflect.Descriptor instead.
func (*RegisterDeviceResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterDeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReceiveFriendRequestNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *ReceiveFriendRequestNotification) Reset() {
	*x = ReceiveFriendRequestNotification{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveFriendRequestNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveFriendRequestNotification) ProtoMessage() {}

func (x *ReceiveFriendRequestNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveFriendRequestNotification.ProtoReflect.Descriptor instead.
func (*ReceiveFriendRequestNotification) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReceiveFriendRequestNotification) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *ReceiveFriendRequestNotification) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *ReceiveFriendRequestNotification) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type SingleMessageSentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *SingleMessageSentResponse) Reset() {
	*x = SingleMessageSentResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleMessageSentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMessageSentResponse) ProtoMessage() {}

func (x *SingleMessageSentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMessageSentResponse.ProtoReflect.Descriptor instead.
func (*SingleMessageSentResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{3}
}

func (x *SingleMessageSentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MultiMessageSentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*SingleMessageSentResponse `protobuf:"bytes,1,rep,name=Status,proto3" json:"Status,omitempty"`
}

func (x *MultiMessageSentResponse) Reset() {
	*x = MultiMessageSentResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiMessageSentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMessageSentResponse) ProtoMessage() {}

func (x *MultiMessageSentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMessageSentResponse.ProtoReflect.Descriptor instead.
func (*MultiMessageSentResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{4}
}

func (x *MultiMessageSentResponse) GetStatus() []*SingleMessageSentResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type CommentNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *CommentNotificationRequest) Reset() {
	*x = CommentNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentNotificationRequest) ProtoMessage() {}

func (x *CommentNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentNotificationRequest.ProtoReflect.Descriptor instead.
func (*CommentNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{5}
}

func (x *CommentNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *CommentNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *CommentNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type ReplyCommentNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *ReplyCommentNotificationRequest) Reset() {
	*x = ReplyCommentNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyCommentNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCommentNotificationRequest) ProtoMessage() {}

func (x *ReplyCommentNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCommentNotificationRequest.ProtoReflect.Descriptor instead.
func (*ReplyCommentNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{6}
}

func (x *ReplyCommentNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *ReplyCommentNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *ReplyCommentNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type ReactPostNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *ReactPostNotificationRequest) Reset() {
	*x = ReactPostNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactPostNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactPostNotificationRequest) ProtoMessage() {}

func (x *ReactPostNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactPostNotificationRequest.ProtoReflect.Descriptor instead.
func (*ReactPostNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{7}
}

func (x *ReactPostNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *ReactPostNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *ReactPostNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type SharePostNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *SharePostNotificationRequest) Reset() {
	*x = SharePostNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharePostNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePostNotificationRequest) ProtoMessage() {}

func (x *SharePostNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePostNotificationRequest.ProtoReflect.Descriptor instead.
func (*SharePostNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{8}
}

func (x *SharePostNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *SharePostNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *SharePostNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type FollowNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *FollowNotificationRequest) Reset() {
	*x = FollowNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FollowNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowNotificationRequest) ProtoMessage() {}

func (x *FollowNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowNotificationRequest.ProtoReflect.Descriptor instead.
func (*FollowNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{9}
}

func (x *FollowNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *FollowNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *FollowNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type MessageNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID        int64  `protobuf:"varint,1,opt,name=ReceiverAccountID,proto3" json:"ReceiverAccountID,omitempty"`
	SenderAccountID          int64  `protobuf:"varint,2,opt,name=SenderAccountID,proto3" json:"SenderAccountID,omitempty"`
	SenderAccountDisplayName string `protobuf:"bytes,3,opt,name=SenderAccountDisplayName,proto3" json:"SenderAccountDisplayName,omitempty"`
}

func (x *MessageNotificationRequest) Reset() {
	*x = MessageNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNotificationRequest) ProtoMessage() {}

func (x *MessageNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNotificationRequest.ProtoReflect.Descriptor instead.
func (*MessageNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{10}
}

func (x *MessageNotificationRequest) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *MessageNotificationRequest) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *MessageNotificationRequest) GetSenderAccountDisplayName() string {
	if x != nil {
		return x.SenderAccountDisplayName
	}
	return ""
}

type GetNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint64 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Page      uint32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize  uint32 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *GetNotificationRequest) Reset() {
	*x = GetNotificationRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationRequest) ProtoMessage() {}

func (x *GetNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetNotificationRequest) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *GetNotificationRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNotificationRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       uint64                 `protobuf:"varint,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Page          uint32                 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Notifications []*NotificationContent `protobuf:"bytes,4,rep,name=Notifications,proto3" json:"Notifications,omitempty"`
}

func (x *GetNotificationResponse) Reset() {
	*x = GetNotificationResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationResponse) ProtoMessage() {}

func (x *GetNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationResponse.ProtoReflect.Descriptor instead.
func (*GetNotificationResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetNotificationResponse) GetAccount() uint64 {
	if x != nil {
		return x.Account
	}
	return 0
}

func (x *GetNotificationResponse) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNotificationResponse) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNotificationResponse) GetNotifications() []*NotificationContent {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type NotificationContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	DateTime int64  `protobuf:"varint,3,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	IsRead   bool   `protobuf:"varint,4,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
}

func (x *NotificationContent) Reset() {
	*x = NotificationContent{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationContent) ProtoMessage() {}

func (x *NotificationContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationContent.ProtoReflect.Descriptor instead.
func (*NotificationContent) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{13}
}

func (x *NotificationContent) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NotificationContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NotificationContent) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *NotificationContent) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type MarkAsReadNotiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *MarkAsReadNotiRequest) Reset() {
	*x = MarkAsReadNotiRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadNotiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadNotiRequest) ProtoMessage() {}

func (x *MarkAsReadNotiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadNotiRequest.ProtoReflect.Descriptor instead.
func (*MarkAsReadNotiRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{14}
}

func (x *MarkAsReadNotiRequest) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

type MarkAsReadNotiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Quantity uint32 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *MarkAsReadNotiResponse) Reset() {
	*x = MarkAsReadNotiResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadNotiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadNotiResponse) ProtoMessage() {}

func (x *MarkAsReadNotiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadNotiResponse.ProtoReflect.Descriptor instead.
func (*MarkAsReadNotiResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{15}
}

func (x *MarkAsReadNotiResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MarkAsReadNotiResponse) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type CountUnreadNotiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *CountUnreadNotiRequest) Reset() {
	*x = CountUnreadNotiRequest{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountUnreadNotiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUnreadNotiRequest) ProtoMessage() {}

func (x *CountUnreadNotiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUnreadNotiRequest.ProtoReflect.Descriptor instead.
func (*CountUnreadNotiRequest) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{16}
}

func (x *CountUnreadNotiRequest) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

type CountUnreadNotiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity uint32 `protobuf:"varint,1,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *CountUnreadNotiResponse) Reset() {
	*x = CountUnreadNotiResponse{}
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountUnreadNotiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUnreadNotiResponse) ProtoMessage() {}

func (x *CountUnreadNotiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_notification_service_notification_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUnreadNotiResponse.ProtoReflect.Descriptor instead.
func (*CountUnreadNotiResponse) Descriptor() ([]byte, []int) {
	return file_proto_notification_service_notification_service_proto_rawDescGZIP(), []int{17}
}

func (x *CountUnreadNotiResponse) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

var File_proto_notification_service_notification_service_proto protoreflect.FileDescriptor

var file_proto_notification_service_notification_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x43, 0x4d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x43, 0x4d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x35, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2,
	0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3a,
	0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x4d, 0x61, 0x72,
	0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x4e, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32,
	0x9b, 0x09, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6e, 0x63, 0x12, 0x2e, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a,
	0x16, 0x2e, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_notification_service_notification_service_proto_rawDescOnce sync.Once
	file_proto_notification_service_notification_service_proto_rawDescData = file_proto_notification_service_notification_service_proto_rawDesc
)

func file_proto_notification_service_notification_service_proto_rawDescGZIP() []byte {
	file_proto_notification_service_notification_service_proto_rawDescOnce.Do(func() {
		file_proto_notification_service_notification_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_notification_service_notification_service_proto_rawDescData)
	})
	return file_proto_notification_service_notification_service_proto_rawDescData
}

var file_proto_notification_service_notification_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_notification_service_notification_service_proto_goTypes = []any{
	(*RegisterDeviceRequest)(nil),            // 0: notification.RegisterDeviceRequest
	(*RegisterDeviceResponse)(nil),           // 1: notification.RegisterDeviceResponse
	(*ReceiveFriendRequestNotification)(nil), // 2: notification.ReceiveFriendRequestNotification
	(*SingleMessageSentResponse)(nil),        // 3: notification.SingleMessageSentResponse
	(*MultiMessageSentResponse)(nil),         // 4: notification.MultiMessageSentResponse
	(*CommentNotificationRequest)(nil),       // 5: notification.CommentNotificationRequest
	(*ReplyCommentNotificationRequest)(nil),  // 6: notification.ReplyCommentNotificationRequest
	(*ReactPostNotificationRequest)(nil),     // 7: notification.ReactPostNotificationRequest
	(*SharePostNotificationRequest)(nil),     // 8: notification.SharePostNotificationRequest
	(*FollowNotificationRequest)(nil),        // 9: notification.FollowNotificationRequest
	(*MessageNotificationRequest)(nil),       // 10: notification.MessageNotificationRequest
	(*GetNotificationRequest)(nil),           // 11: notification.GetNotificationRequest
	(*GetNotificationResponse)(nil),          // 12: notification.GetNotificationResponse
	(*NotificationContent)(nil),              // 13: notification.NotificationContent
	(*MarkAsReadNotiRequest)(nil),            // 14: notification.MarkAsReadNotiRequest
	(*MarkAsReadNotiResponse)(nil),           // 15: notification.MarkAsReadNotiResponse
	(*CountUnreadNotiRequest)(nil),           // 16: notification.CountUnreadNotiRequest
	(*CountUnreadNotiResponse)(nil),          // 17: notification.CountUnreadNotiResponse
}
var file_proto_notification_service_notification_service_proto_depIdxs = []int32{
	3,  // 0: notification.MultiMessageSentResponse.Status:type_name -> notification.SingleMessageSentResponse
	13, // 1: notification.GetNotificationResponse.Notifications:type_name -> notification.NotificationContent
	0,  // 2: notification.NotificationService.RegisterDevice:input_type -> notification.RegisterDeviceRequest
	2,  // 3: notification.NotificationService.ReceiveFriendRequestNotificationFnc:input_type -> notification.ReceiveFriendRequestNotification
	5,  // 4: notification.NotificationService.CommentNotification:input_type -> notification.CommentNotificationRequest
	6,  // 5: notification.NotificationService.ReplyCommentNotification:input_type -> notification.ReplyCommentNotificationRequest
	7,  // 6: notification.NotificationService.ReactPostNotification:input_type -> notification.ReactPostNotificationRequest
	8,  // 7: notification.NotificationService.SharePostNotification:input_type -> notification.SharePostNotificationRequest
	9,  // 8: notification.NotificationService.FollowNotification:input_type -> notification.FollowNotificationRequest
	10, // 9: notification.NotificationService.MessageNotification:input_type -> notification.MessageNotificationRequest
	11, // 10: notification.NotificationService.GetNotification:input_type -> notification.GetNotificationRequest
	14, // 11: notification.NotificationService.MarkAsReadNoti:input_type -> notification.MarkAsReadNotiRequest
	16, // 12: notification.NotificationService.CountUnReadNoti:input_type -> notification.CountUnreadNotiRequest
	1,  // 13: notification.NotificationService.RegisterDevice:output_type -> notification.RegisterDeviceResponse
	3,  // 14: notification.NotificationService.ReceiveFriendRequestNotificationFnc:output_type -> notification.SingleMessageSentResponse
	3,  // 15: notification.NotificationService.CommentNotification:output_type -> notification.SingleMessageSentResponse
	3,  // 16: notification.NotificationService.ReplyCommentNotification:output_type -> notification.SingleMessageSentResponse
	3,  // 17: notification.NotificationService.ReactPostNotification:output_type -> notification.SingleMessageSentResponse
	3,  // 18: notification.NotificationService.SharePostNotification:output_type -> notification.SingleMessageSentResponse
	3,  // 19: notification.NotificationService.FollowNotification:output_type -> notification.SingleMessageSentResponse
	3,  // 20: notification.NotificationService.MessageNotification:output_type -> notification.SingleMessageSentResponse
	12, // 21: notification.NotificationService.GetNotification:output_type -> notification.GetNotificationResponse
	15, // 22: notification.NotificationService.MarkAsReadNoti:output_type -> notification.MarkAsReadNotiResponse
	17, // 23: notification.NotificationService.CountUnReadNoti:output_type -> notification.CountUnreadNotiResponse
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_proto_notification_service_notification_service_proto_init() }
func file_proto_notification_service_notification_service_proto_init() {
	if File_proto_notification_service_notification_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_notification_service_notification_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_notification_service_notification_service_proto_goTypes,
		DependencyIndexes: file_proto_notification_service_notification_service_proto_depIdxs,
		MessageInfos:      file_proto_notification_service_notification_service_proto_msgTypes,
	}.Build()
	File_proto_notification_service_notification_service_proto = out.File
	file_proto_notification_service_notification_service_proto_rawDesc = nil
	file_proto_notification_service_notification_service_proto_goTypes = nil
	file_proto_notification_service_notification_service_proto_depIdxs = nil
}
